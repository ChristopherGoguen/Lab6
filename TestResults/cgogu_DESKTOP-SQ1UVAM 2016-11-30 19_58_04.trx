<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="cddd024f-91f5-4e1d-a6ff-ea819a27bbe7" name="cgogu@DESKTOP-SQ1UVAM 2016-11-30 19:58:04" runUser="DESKTOP-SQ1UVAM\cgogu" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Default Test Settings" id="d461cd6e-ecf2-42b4-8dd6-f8764a708f73">
    <Deployment userDeploymentRoot="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\TestResults" useDefaultDeploymentRoot="false" runDeploymentRoot="cgogu_DESKTOP-SQ1UVAM 2016-11-30 19_58_04">
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6.Tests\FakesAssemblies\Christopher.Goguen.Lab6.Fakes.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.Core.5.2.3\lib\net45\System.Web.Http.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6.Tests\FakesAssemblies\System.4.0.0.0.Fakes.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6\bin\Christopher.Goguen.Lab6.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.Helpers.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.WebHost.5.2.3\lib\net45\System.Web.Http.WebHost.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.Client.5.2.3\lib\net45\System.Net.Http.Formatting.dll" />
      <DeploymentItem filename="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\PublicAssemblies\Microsoft.QualityTools.Testing.Fakes.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.Mvc.5.2.3\lib\net45\System.Web.Mvc.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.Razor.3.2.3\lib\net45\System.Web.Razor.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.Deployment.dll" />
      <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.Razor.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2016-11-30T19:58:04.4758175-05:00" queuing="2016-11-30T19:58:05.2152814-05:00" start="2016-11-30T19:58:05.5451576-05:00" finish="2016-11-30T19:58:20.4829828-05:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="c:\users\cgogu\documents\visual studio 2015\projects\christopher.goguen.lab6\christopher.goguen.lab6.tests\controllers\webtest1.webtest" id="4ee3c752-446a-4c14-8e12-68ead5b64204" persistedWebTest="">
      <Execution id="2a501e62-5118-4f8a-a5df-b06ed1385450" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="4ee3c752-446a-4c14-8e12-68ead5b64204" executionId="2a501e62-5118-4f8a-a5df-b06ed1385450" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="2a501e62-5118-4f8a-a5df-b06ed1385450" testId="4ee3c752-446a-4c14-8e12-68ead5b64204" testName="WebTest1" computerName="DESKTOP-SQ1UVAM" duration="00:00:03.8956691" startTime="2016-11-30T19:58:05.6765072-05:00" endTime="2016-11-30T19:58:20.3702298-05:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a501e62-5118-4f8a-a5df-b06ed1385450">
      <Output>
        <ErrorInfo>
          <Message>13 primary requests, 1 dependant requests and 0 conditional rules failed</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Default Test Settings" id="d461cd6e-ecf2-42b4-8dd6-f8764a708f73">
        <Deployment userDeploymentRoot="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\TestResults" useDefaultDeploymentRoot="false" runDeploymentRoot="cgogu_DESKTOP-SQ1UVAM 2016-11-30 19_58_04">
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6.Tests\FakesAssemblies\Christopher.Goguen.Lab6.Fakes.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.Web.Infrastructure.1.0.0.0\lib\net40\Microsoft.Web.Infrastructure.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.Core.5.2.3\lib\net45\System.Web.Http.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6.Tests\FakesAssemblies\System.4.0.0.0.Fakes.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\Christopher.Goguen.Lab6\bin\Christopher.Goguen.Lab6.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.Helpers.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.WebHost.5.2.3\lib\net45\System.Web.Http.WebHost.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebApi.Client.5.2.3\lib\net45\System.Net.Http.Formatting.dll" />
          <DeploymentItem filename="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\PublicAssemblies\Microsoft.QualityTools.Testing.Fakes.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.Mvc.5.2.3\lib\net45\System.Web.Mvc.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.Razor.3.2.3\lib\net45\System.Web.Razor.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.Deployment.dll" />
          <DeploymentItem filename="C:\Users\cgogu\Documents\Visual Studio 2015\Projects\Christopher.Goguen.Lab6\packages\Microsoft.AspNet.WebPages.3.2.3\lib\net45\System.Web.WebPages.Razor.dll" />
        </Deployment>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Properties />
      </TestSettings>
      <WebTestResultFilePath>cgogu_DESKTOP-SQ1UVAM 2016-11-30 19_58_04\In\2a501e62-5118-4f8a-a5df-b06ed1385450\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>